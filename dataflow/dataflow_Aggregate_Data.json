{
	"name": "dataflow_Aggregate_Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NYC_Payroll_summary",
						"type": "DatasetReference"
					},
					"name": "sourcepayrolldata"
				},
				{
					"dataset": {
						"referenceName": "nycpayroll_2020",
						"type": "DatasetReference"
					},
					"name": "sourcenychistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "NYC_Payroll_summary",
						"type": "DatasetReference"
					},
					"name": "sinksummary"
				}
			],
			"transformations": [
				{
					"name": "union1",
					"description": "Combining rows from transformation 'sourcepayrolldata'"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumnTotalPaid"
				},
				{
					"name": "aggregateTotalPaid"
				}
			],
			"scriptLines": [
				"parameters{",
				"     fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> sourcepayrolldata",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as string,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as string,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcenychistory",
				"sourcepayrolldata, sourcenychistory union(byName: true)~> union1",
				"union1 filter(toInteger(FiscalYear) >= $fiscalyear) ~> filter1",
				"filter1 derive(Total_Paid = RegularGrossPaid + TotalOTPaid+TotalOtherPay) ~> derivedColumnTotalPaid",
				"derivedColumnTotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregateTotalPaid",
				"aggregateTotalPaid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid",
				"     )) ~> sinksummary"
			]
		}
	}
}